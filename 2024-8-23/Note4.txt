1.super()关键字
super不能直接访问父类的private属性和方法
当子类调用属性或方法时，从自己开始查找，然后找父类，没找到再继续找爷类；
但当使用super时会跳过自己，直接从父类开始找；
当子类和父类中的成员（方法和属性）重名时，为了访问父类的成员，当然只能用super了

2.重写 Override
好有感觉 三年前在深圳的新年也在玩这个
要求子类和父类的方法名、形参列表都完全一样；子类和父类的返回类型一样，或是父类返回类型的子类
子类重写不能缩小父类方法的访问权限（访问修饰符）
Homework39 比较重载和重写 想一想 问问gpt
Homework40 编写一个Person类 包含属性private(name, age), 构造器、方法say(返回自我介绍字符串)
编写Student类，继承Person类，增加private属性(id, score),定义say方法；
在main中测试

3.多态
问gpt吧 回答的很好 KeyWord"介绍一下多态"
多态的向上转型: Animal myAnimal = new Dog();
多态的向下转型 Dog myDog = (Dog) myAnimal;
强制类型转换的一个使用方式，这样之后就可以用myDog访问Dog类中的特有方法，如bark()
向下转型会出现错误ClassCastException，所以在转换前可以用instanceof来检查对象是否属于某个特定的子类
属性没有重写的说法；当属性重名时，子类会隐藏父类的属性；当需要调用父类属性时，使用super()
Homework41 P313看代码 boolean不参与类型转化；

动态绑定机制 看案例；直接问gpt；
#Homework42 多态数组 看案例 是对前面的综合运用
#Homework43 多态参数 看gpt 通过定义父类指向子类的方式，在运行时能调用实际子类的方法

4.Object类
使用vscode和vscode风格的idea逻辑时，查看源码直接选中后点F12就行
因为是默认继承的父类，所以Object的方法对于所有自带的变量都能用到；
重写equals 没太完全理解 后面用的时候回来补
Homework44 自己重写equals() 判断两个Person对象的内容是否相等，如果属性值一样返回true
Homework45 判断题 从这个题深入理解==和equals
#Homework46 判断题 挖个坑以后有机会来吧^^

hashCode方法 生成哈希码值
xxx.hashCode();

toString方法 返回该对象的字符串表示 即 全类名+@+哈希值的十六进制
直接输出一个对象时，toString方法会被默认调用
xxx.toString();

finalize()方法 系统会自动调用这个方法来回收对象，从而释放资源

5.断点调试 debug的一种 学习一下
刷算法题会狂看吧（大概）

#javase大作业Homework47 零钱通项目
对我来说完全没意义了 skip了(乐)

6.P360不要让惰性毁了你&P373 javase阶段结束
人在大阪 回望初高中的废寝忘食，大学的宿舍床板，馆子的研究室；只能说老中的苦都是自己卷出来的^^||
感觉大学本科就只学到了这里 但是很明显就业完全不止这些；如果大一的时候有这些课会不会学的更多呢？
估计不会，如果当时java已经卷飞了我估计直接跑路了，读研可能直接换文科专业了；
越优秀的教学科会产生越多的java人，越多的java人会越内卷，结果就是23年深圳应届生一个月6k爱来不来^^||

接下来的内容就是工业用途了~

7.类变量&类方法（静态变量，静态方法）
在类内直接定义，使用静态关键字 static修饰该变量；
作用：计数器；做成静态方法，在用类名的时候直接可以使用方法（确实好用）
类变量也同样可以用private等访问修饰符来控制访问权限
在开发自己的工具类时，也可以自定义这些类方法；
类方法和普通方法都是随着类的加载而加载，但this肯定不能写在类方法里
Homework48 静态方法、静态变量练习题

8.main语法
首先，从站在jvm的角度理解psvm为什么这样写，如何执行
其次，有关main所在类的静态和动态执行权限
main方法中动态传值；其实就是在创建这个类的configuration中修改，就能改变这个数组args

9.代码块
类似构造器的存在，但很明显，无论调用哪个构造器都会先加载代码块 {}后面;爱加不加
如果只是使用类的静态成员，普通代码块不会执行，但加载时，静态代码块会执行且只执行这一次；
子类加载时，先加载父类，则会先加载父类代码块，再加载子类代码块

代码块特点：
首先，类加载时执行静态代码块和静态变量的初始化；他们的执行顺序按照代码的先后顺序；
随后，普通代码块和普通变量初始化，顺序同样如此
最后调用构造函数；（构造函数突然变low）
难点：玩明白类加载时，子类、父类、main中执行语句这三方的各个模块的加载顺序
Homework49 典中典玩代码块练习题 别折磨我了^^||

10.单例设计模式
问gpt得了 还讲了两个新的 感觉要后面实际运用的时候才会具体理解

11.final关键字
可以修饰类 属性 方法 局部变量；
在不希望被继承时，给类加final；
在不希望父类的某个方法被子类重写/覆盖时，给父类方法加final;
当不希望类的某个属性的值被修改时，可以用final；
当不希望某个局部变量被修改时，加定义时加final;

(谁会情愿写新代码的时候报错呢？^^||我直接删final而不是让他不变XD)
如果final修饰静态属性，则只能在定义和静态代码块中使用，无法在构造器中赋值（河里）；
final无法被继承，但可以实例化对象（还用问？不然写这个类干什么）；
如果只是有final方法的类，当然可以被继承，只是方法不能重写；
不要用final去修饰构造方法（你是nc吗）；final经常和static一块使用（确实好用）；
包装类（Int，Double，Float，Boolean等）final修饰的，String也是；

Homework50 Final练习题；
第一道创建Circle类输入radius，使用方法得到面积
第二道 代码判断题；有点意思

12.抽象类 （好久不见） public abstract A extends B {}
抽象类是来告诉这个父类的某些成员确定有，但是不确定具体怎么写；可以理解成占位占好了;
一般抽象类肯定是子类来完善内容；
抽象方法不能有方法体{}，但是()里面可以传参；类中有抽象方法，则必须声明为抽象类；
一个类继承抽象类，要么他也是抽象类，要么他实现所有抽象方法；
#Homework51 抽象类练习题
抽象类模版设计应用

13.接口














